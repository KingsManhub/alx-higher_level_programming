==============================
test module for 0-add_integer
==============================

This module test all functionality of add_integer function

"add_integer(a, b=98)" takes two arguments and return their sum, it's ewuivalent to 'a+b'.
a and b can either be integer or float.
every float data are casted into integer before addition

===> Usage <===

::
importing the module with it's function

>>> add_integer = __import__('0-add_integer').add_integer

::
Fitting in integers or floats data first

>>> add_integer(2)
100
>>> add_integer(2, 3)
5
>>> add_integer(2.9, 4)
6
>>> add_integer(2.9, 4.8)
6
>>> add_integer(-5, 7)
2
>>> add_integer(-5, -4.9)
-9

::
fitting in values that can't be casted to int

If the first value can't be casted to int, a error is thrown

>>> add_integer("hello", 3)
Traceback (most recent call last):
TypeError: a must be an integer

if both arguments can't be casted to int, a error is thrown

>>> add_integer("hello", "you")
Traceback (most recent call last):
TypeError: a must be an integer

If the second argument can't be casted to integer, b error is thrown

>>> add_integer(3, "hey")
Traceback (most recent call last):
TypeError: b must be an integer

Fitting in a list will also throw an error at where it's used as argument

>>> add_integer(3, [2, 4])
Traceback (most recent call last):
TypeError: a must be an integer

::
Using a None value as argument 

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer
